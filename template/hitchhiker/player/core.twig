<div id="player" class="{{ include("page_fragments/player.class.twig") }}" role="complementary">
   <div id="theater-background" class="player-height"></div>
   <div id="player-mole-container">
      <div id="player-unavailable" class="{% include "page_fragments/player_unavailable.class.twig" %}">
         {% include "page_fragments/player_unavailable.twig" %}
      </div>
      <div id="player-api" class="player-width player-height off-screen-target player-api" tabIndex="-1"></div>
      <script >if (window.ytcsi) {window.ytcsi.tick("cfg", null, '');}</script>
      {#
         Player definition scripts. This is somewhat different to what you'd expect.
         This implements a ytInitialPlayerResponse object, which is compatible with
         Polymer's load methods. This simply allows extensions and userscripts to
         intercept the player response before the player is loaded.   
      #}
      <script>
         ytcfg.set("STS", {{ yt.playerConfig.signatureTimestamp }});
         var ytInitialPlayerResponse = {
            "playerResponse": {{ yt.playerResponse|json_encode|raw }}
         };
      </script>
      <script>
{% if rehike.config.appearance.playerChoice == "PLAYER_2014" or rehike.config.appearance.playerChoice == "PLAYER_2015" or rehike.config.appearance.playerChoice == "PLAYER_2015_NEW" %}
   {% include "player/classic_player_boot.twig" %}
{% else %}
{% apply spaceless %}
var ytplayer = ytplayer || {};
ytplayer.config = {
    "args": {
       {%- if yt.playerResponse -%}
         raw_player_response: ytInitialPlayerResponse.playerResponse,
         {% if yt.watchNextResponse %}
         raw_watch_next_response: {{ yt.watchNextResponse|json_encode|raw }},
         {% endif %}
       {% endif %}
       {%- if yt.page.playlist -%}
         "swf_player_response": "1",
         "videoId": "{{ yt.videoId }}",
         "list": "{{ yt.playlistId }}",
         "external_list": "1",
         "idpj": "-1",
         "no_get_video_log": "0",
         "is_listed": "1",
         "t": "1",
         "plid": "AAVm9hRW-h1RWxWz",
         "ldpj": "-31",
         "ptk": "youtube_multi",
         "pltype": "content",
       {%- endif -%}
       disable_watch_next: true,
        "apiary_host_firstparty": "",
        "fexp": "23708904,23708906,23708910,23710476,23712544,23716256,23721698,23721898,23723588,23723618,23725949,23726564,23729690,23730642,23733473,23733751,23735154,23735395,23736169,23736484,23736955,23737659,23738006,23738944,23739239,23739533,23739764,9405975,9422596,9449243,9470249,9471235,9474241,9476619,9476652,9483924,9485000,9487182",
        "player_error_log_fraction": "1.0",
        "host_language": "en",
        "enablejsapi": "1",
        "c": "WEB",
        "innertube_context_client_version": "2.20210623.00.00",
        "hl": "en_US",
        "fflags": "{% include "player/flags.twig" %}",
        "xhr_apiary_host": "youtubei.youtube.com",
        "gapi_hint_params": "m;\/_\/scs\/abc-static\/_\/js\/k=gapi.gapi.en.fXLlmSb25lg.O\/m=__features__\/rt=j\/d=1\/rs=AHpOoo87O_nfyKCryZ5rvwwhVwktxKhiRA",
        "autoplay": "1",
        "external_play_video": "1",
        "innertube_api_key": "AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8",
        "cver": "2.20210623.00.00",
        "cr": "US",
        "is_html5_mobile_device": false,
        "innertube_api_version": "v1",
        "apiary_host": ""
    },
    "params": {
        "allowfullscreen": "true",
        "allowscriptaccess": "always",
        "bgcolor": "#000000"
    },
    "assets": {
        "css": {{ (yt.playerConfig.baseCssUrl)|json_encode|raw }},
        "js": {{ (yt.playerConfig.baseJsUrl)|json_encode|raw }}
    },
    "html5": true,
    "url": "",
    "sts": {{ yt.playerConfig.signatureTimestamp }},
    "attrs": {
        "id": "movie_player",
        "class": "ytp-embed"
    }
};
{% endapply %}
ytplayer.load = function() {
    yt.player.Application.create("player-api", ytplayer.config);
    ytplayer.config.loaded = true;
};
{% endif %}
</script>
      <div id="player-playlist" class="{{ include("page_fragments/player_playlist.class.twig") }}">
         {% include 'page_fragments/player_playlist.twig' %}
      </div>
   </div>
   <div class="clear"></div>
</div>
<script>
   // Check if the end-user uses age restrict bypass extension
   // If so, the player unavailable message cannot be removed by
   // it by default, so we need to do it ourselves.
   if ("SYARB_CONFIG" in window)
   {
      var a = document.createElement("style");
      a.id = "age-restrict-bypass-fix";
      a.innerHTML = "#player-unavailable { display: none; }";
      document.body.appendChild(a);
   }
</script>
{% if rehike.config.appearance.smallPlayer and rehike.config.appearance.playerChoice == "CURRENT" %}
   <style id="rehike-ext-config-small-player">
      {% include "player/small_style.css.twig" %}
   </style>
{% endif %}
{% if (rehike.config.appearance.playerChoice == "PLAYER_2014" or rehike.config.appearance.playerChoice == "PLAYER_2015") and (rehike.config.appearance.classicPlayerForcePersistentControls) %}
   <style id="rehike-ext-config-classic-player-persistent-controls">
      {% include "player/classic_player_persistent_controls.css.twig" %}
   </style>
{% endif %}