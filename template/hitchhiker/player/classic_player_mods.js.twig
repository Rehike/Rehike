var initClassicPlayerMods = function(){};

(function(){

{% include "rehike/core/rehike-core.js.twig" %}

// I NEVER WANT TO INTERFACE WITH JS KEYBOARD API EVER AGAIN
var KEYCODE_ENTER = 13;
var KEYCODE_SPACE = 32;
var KEYCODE_T = 84;
var KEYCODE_J = 74;
var KEYCODE_K = 75;
var KEYCODE_L = 76;
var KEYCODE_M = 77;
var KEYCODE_LT = 188;
var KEYCODE_GT = 190;

var CHARCODE_T = 84 + 32;
var CHARCODE_K = 75 + 32;

var DEBUG = true;

function getMoviePlayer()
{
    return document.getElementById(ytplayer.config.attrs.id || "movie_player");
}

function waitForSomething(conditionCb, resultCb, opt_timeout, opt_interval)
{
    opt_timeout = opt_timeout || -1;
    opt_interval = opt_interval || 1;

    return new Promise(function(resolve, reject) {
        var interval = setInterval(function() {
            if (conditionCb())
            {
                resolve(resultCb());
            }
        }, opt_interval);
        
        if (timeout > -1)
        {
            var timeout = setTimeout(function() {
                clearInterval(interval);
                clearTimeout(timeout);
                reject("Timed out.");
            }, opt_timeout);
        }
    });
}

function waitForMoviePlayer()
{
    var a;
    return waitForSomething(function() {
        return null != (a = getMoviePlayer());
    }, function() {
        return a;
    }, 5000);
}

/**
 * We need to do this since player API element overrides addEventListener
 * with a custom function.
 */
function addEventToPlayer(eventName, callback)
{
    var api = getMoviePlayer();

    if (Element.prototype.addEventListener)
    {
        Element.prototype.addEventListener.call(api, eventName, callback);
    }
    else if (api.attachEvent)
    {
        api.attachEvent("on" + eventName, callback);
    }
}

/**
 * Handles initial playback failure and forces the cue screen to appear.
 * 
 * Newer player revisions also do this, but it's not natively supported in older
 * versions, so they will just stuck in a fake playing state by default, and the
 * user will have to essentially interact twice to get it working as intended
 * (first to truly pause, then to play again).
 */
function handleInitialPlaybackFailure()
{
    var api = getMoviePlayer();
    api.stopVideo();
    api.cueVideoByPlayerVars(ytplayer.config.args);
    api.hideControls;
}

function onChangeWatchAutonavState()
{
    var watchSwitch = document.querySelector("#autoplay-checkbox");
    var api = getMoviePlayer();
    api.setAutonav(watchSwitch.checked)
}

function onContextMenuPlayerChild(e)
{
    var playerMenu = document.querySelector(".html5-context-menu");

    if (playerMenu && getComputedStyle(playerMenu).display != "none")
    {
        // Excuse my cheap hack to hide the player menu:
        var temp = document.activeElement;
        document.documentElement.click();
        temp.focus();
        e.stopPropagation();
    }
}

function onClickLoop(e)
{
    var api = getMoviePlayer();
    var video = api.querySelector("video");

    video.loop = !video.loop;

    // Close the context menu
    document.documentElement.click();
}

function initPlayerLoop(api)
{
    // Style stolen from V3
    var style = document.createElement("style");
    style.textContent =
        ".html5-context-menu-loop-switch.checked .check:after {" +
        "    content: \"âœ“\";                             " +
        "    position: absolute;                        " +
        "    margin-left: 10px;                         " +
        "    font-weight: bold;                         " +
        "    font-family: Arial, sans-serif;            " +
        "    opacity: .7;                               " +
        "}";
    style.id = "rh-player-classic-loop-styles";
    document.body.appendChild(style);

    var menu = document.querySelector(".html5-context-menu");
    var wrapper = document.createElement("li");
    var item = document.createElement("span");
    var check = document.createElement("span");
    item.className = "yt-uix-button-menu-item html5-context-menu-loop-switch";
    item.textContent = window._rehikeClassicPlayerTranslations.playerClassicLoop || "Loop";
    check.className = "check";
    check.lang = "en";
    item.appendChild(check);
    wrapper.appendChild(item);
    menu.insertBefore(wrapper, menu.firstChild);

    addEventToPlayer("contextmenu", function(e) {
        var videoElement = api.querySelector("video");

        if (videoElement)
        {
            if (videoElement.loop)
            {
                if (!rehike.class.has(item, "checked"))
                {
                    rehike.class.add(item, "checked");
                }
            }
            else
            {
                if (rehike.class.has(item, "checked"))
                {
                    rehike.class.remove(item, "checked");
                }
            }
        }
    });

    rehike.util.events.add(
        item,
        "click",
        onClickLoop
    );
}

function preventWatchScrollSpace(e)
{
    if (e.keyCode == KEYCODE_SPACE && e.target == document.body)
    {
        e.preventDefault();
    }
}

function onSpfDone(e)
{
    onPageChanged();
}

function isWatchPage()
{
    if (document.querySelector("#page.watch"))
    {
        return true;
    }

    return false;
}

function onPageChanged()
{
    if (isWatchPage())
    {
        // Prevent space from scrolling the page.
        rehike.util.events.add(
            window,
            "keydown",
            preventWatchScrollSpace
        );
    }
    else
    {
        rehike.util.events.remove(
            window,
            "keydown",
            preventWatchScrollSpace
        );
    }
}

function initPageSpecificEvents()
{
    rehike.util.events.add(
        document,
        "spfdone",
        onSpfDone
    );

    onPageChanged();
}

function playerCustomKeyPressHandler(e)
{
    if (DEBUG)
        console.log("[playerCustomKeyPressHandler]", e);
    var api = getMoviePlayer();

    if (e.target != api)
    {
        if (DEBUG)
            console.log("last event ignored");
        return;
    }

    switch (e.charCode)
    {
        case CHARCODE_T:
            // Theater Mode key in newer players
            var toggleButton = api.querySelector(".ytp-size-toggle-large") ||
                               api.querySelector(".ytp-size-toggle-small");

            if (toggleButton)
            {
                // Simulate a click to this button to force it to toggle.
                toggleButton.click();
                toggleButton.blur();
            }
            break;
        case CHARCODE_K:
            // Alternative pause key in newer players
            var evt = new KeyboardEvent("keypress", {
                bubbles: false,
                keyCode: KEYCODE_SPACE
            });
            api.dispatchEvent(evt);
            break;
    }

    e.stopPropagation();
}

function playerCustomKeyDownHandler(e)
{
    if (DEBUG)
        console.log("[playerCustomKeyDownHandler]", e);
    var api = getMoviePlayer();

    if (e.target != api)
    {
        if (DEBUG)
            console.log("last event ignored");
        return;
    }

    switch (e.keyCode)
    {
        case KEYCODE_J:
            // Seek backward by 10 seconds in newer players
            api.seekBy(-10);
            break;
        case KEYCODE_L:
            // Seek forward by 10 seconds in newer players
            api.seekBy(10);
            break;
        case KEYCODE_LT:
        case KEYCODE_GT:
            // Seek backward by 1 frame in newer players
            if (api.rhGetInternalApi)
            {
                var fps = api.rhGetInternalApi().getVideoFps();

                if (fps && fps > 0)
                {
                    api.seekBy((1 / fps) * (e.keyCode == KEYCODE_LT ? -1 : 1));
                }
            }
            break;
    }

    e.stopPropagation();
}

function handleGlobalKeyDown(e)
{
    var keyCode = e.detail.keyCode;
    var modifier = e.detail.modifier;

    var isAlpha = false;
    var charCode = keyCode;
    // If we're working with an alphabetical key code, then we want to make it
    // lowercase:
    if (keyCode >= 65 && keyCode <= 90)
    {
        // ASCII lowercase letters are separated from the uppercase ones by 32
        // other characters.
        charCode += 32;
        isAlpha = true;
    }

    if (DEBUG)
        console.log("[handleGlobalKeyDown]", keyCode, modifier);

    var api = getMoviePlayer();

    // Redirect the key input to the player.
    var newEvent = new KeyboardEvent("keydown", {
        keyCode: keyCode
    });
    
    // We ignore it if the original character is non-alphanumeric, since
    // conflicts can occur (lowercase alphabet range for charCode falls in the
    // same position as F keys for keyCode).
    var newEvent2 = new KeyboardEvent("keypress", {
        charCode: isAlpha ? charCode : 0
    });

    if (api)
    {
        api.dispatchEvent(newEvent);
        api.dispatchEvent(newEvent2);
    }
}

function onLoadPlayerElement(api)
{
    // Fix autonav synchronization:
    var watchSwitch = document.querySelector("#autoplay-checkbox");
    if (watchSwitch)
    {
        rehike.util.events.add(
            watchSwitch,
            "click",
            onChangeWatchAutonavState
        );

        rehike.util.events.add(
            watchSwitch,
            "keypress",
            onChangeWatchAutonavState
        );
    }

    // These things don't need refreshing (or break with it)
    {% if not yt.spf %}
        // Next, we need to listen to this event to handle button presses. For some
        // reason, the player doesn't handle this natively, but this quick fix works:
        api.addEventListener("onAutonavChangeRequest", function(status) {
            //console.log(status);
            api.setAutonav(status)
        });

        // Initial autonav state also needs synchronization, otherwise it will not
        // appear:
        api.setAutonav(Boolean(ytplayer.config.args.autonav));

        // Double right click for native context menu:
        for (var i = 0, j = api.children.length; i < j; i++)
        {
            var child = api.children[i];
            rehike.util.events.add(
                child,
                "contextmenu",
                onContextMenuPlayerChild
            );
        }
    
        // Loop button:
        initPlayerLoop(api);

        // Custom keyboard events:
        addEventToPlayer("keydown", playerCustomKeyDownHandler);
        addEventToPlayer("keypress", playerCustomKeyPressHandler);
    {% endif %}
}

// This is exported to the above scope.
initClassicPlayerMods = function()
{
    waitForMoviePlayer().then(onLoadPlayerElement);
    
    // Global events like this should only be added once per-session:
    {% if not yt.spf %}
        // Page-specific events:
        initPageSpecificEvents();

        // Keyboard events:
        rehike.util.events.add(
            document, 
            "rh-classic-player-global-key-down", 
            handleGlobalKeyDown
        );

        // Initial playback failure:
        rehike.util.events.add(
            document, 
            "rh-classic-player-fail-play-video", 
            handleInitialPlaybackFailure
        );
    {% endif %}
};

})();